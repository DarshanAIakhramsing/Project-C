@page "/Notificaties"
@using Project_C.Data;
@using Project_C.Services;
@using Project_C.Models;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext database
@inject AuthenticationState UserManager
@inject UserManager<User> UserManager
@inject SessionCRUD SessionManager
@inherits OwningComponentBase<SessionService>

<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity.Name!</h1>
        You can only see this if you're authenticated.
    </Authorized>
    <NotAuthorized>
        You're not logged in.
    </NotAuthorized>
</AuthorizeView>

    <h3>Person</h3>

    <table border="1">
        <tr>
            <th>Sessie naam</th>
            <th>Datum</th>
            <th>Locatie</th>
            <th>Uitnodiging accepteren of weigeren</th>
        </tr>
        @foreach (var sessie in sessies)
        {
            <tr>
                <td>@sessie.session_name</td>
                <td>@sessie.session_date</td>
                <td>@sessie.session_location</td>
                <td><button @onclick="@((args) => ButtonClicked(sessie.session_id))">Ja</button></td>
            </tr>
        }
    </table>

@code {
    public System.Collections.Generic.IList<SessionInfo> sessies;
    public System.Collections.Generic.IList<UserMeeting> meetings;

    protected override void OnInitialized()
    {
        sessies = Service.DisplaySession();
    }

    public void ButtonClicked(int ButtonID)
    {
        Console.WriteLine(ButtonID);
    }

    public async Task ClickHandler()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal ding = authState.User;
        var currentUser = await UserManager.GetUserAsync(ding);
        //int currentSessionID = sessies.session_id;

        User currentUserId = (from U in database.Users where U.Id == currentUser.Id select U).FirstOrDefault();
        //SessionInfo currentSessionId = (from S in database.Session where S.session_id ==  select S).FirstOrDefault();

        UserMeeting um = new UserMeeting()
        {
            User = currentUserId,
            //SessionInfo = currentUserId
        };

        //await NotificationCreate.InsertMeetingAsync(um);

        currentUser.accept_invitation++;
        database.Update(currentUser);
        await database.SaveChangesAsync();
    }
}
