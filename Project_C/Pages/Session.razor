@page "/sessies"

@using Project_C.Data
@using Project_C.Models
@using Project_C.Services
@using System.ComponentModel.DataAnnotations;

@inject SessionCRUD sessionCRUD


<AuthorizeView Roles="Organisator, Admin">
    <Authorized Context="Auth">
        @if (Sessions == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class='table table-hover'>
                <thead>
                    <tr>
                        <th>Sessie naam</th>
                        <th>Sessie locatie</th>
                        <th>Datum</th>
                        <th>Tijdstip</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Sessions)
                    {
                        <tr @onclick="@(() => SelectSession(item))">
                            <td>@item.Name</td>
                            <td>@item.Location</td>
                            <td>@item.Date.ToShortDateString()</td>
                            <td>@item.Time.TimeOfDay</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <EditForm Model="@EditModel" OnValidSubmit="@Submit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label>
                Sessie naam:
                <InputText id="Name" @bind-Value="@EditModel.Name">Sessie naam:</InputText>
            </label>
            <br />
            <label>
                Sessie Locatie:
                <InputText id="Location" @bind-Value="@EditModel.Location">Sessie locatie:</InputText>
            </label>
            <br />
            <label>
                Datum:
                <InputDate id="Date" type="time" @bind-Value="@EditModel.Date" @bind-Value:format="dd/MM/yyyy">Datum:</InputDate>
            </label>
            <br />
            <label>
                Tijdstip:
                <input id="Time" type="time" @bind-value="@EditModel.Time" />
            </label>
            <br />

            @switch (mode)
            {
                case MODE.None:
                    <button type="submit">Voeg toe</button>
                    break;
                case MODE.EditDelete:
                    <button type="submit">Wijzig</button>
                    break;
            }
        </EditForm>

        @if (mode == MODE.EditDelete)
        {
            <br />
            <button @onclick="Delete">Verwijder</button>
        }

    </Authorized>
    <NotAuthorized>
        U bent niet geautoriseerd.
    </NotAuthorized>
</AuthorizeView>

@code {
    public class EditSessionModel
    {
        [Required, StringLength(255, MinimumLength = 1)]
        public string Name { get; set; }

        [Required, StringLength(255, MinimumLength = 1)]
        public string Location { get; set; }

        public DateTime Date { get; set; }

        public DateTime Time { get; set; }

    }
    private bool IsShow { get; set; } = false;

    EditSessionModel EditModel { get; set; } = new();

    public System.Collections.Generic.IList<SessionInfo> Sessions { get; set; }

    private enum MODE { None, Add, EditDelete };

    public int SelectedSessionID = -1;

    MODE mode = MODE.None;

    public async void Submit()
    {
        var session = (from S in Sessions where S.Id == SelectedSessionID select S).FirstOrDefault() ?? new();
        session.Name = EditModel.Name;
        session.Location = EditModel.Location;
        session.Date = EditModel.Date;
        session.Time = EditModel.Time;
        await sessionCRUD.UpdateSessionAsync(session);
        if (!Sessions.Contains(session)) Sessions.Add(session);
        StateHasChanged();
    }

    protected async override void OnInitialized()
    {
        Sessions = await sessionCRUD.GetSessionsAsync();
        StateHasChanged();
    }


    protected async Task Delete()
    {
        var toDelete = (from S in Sessions where S.Id == SelectedSessionID select S).First();
        Sessions.Remove(toDelete);
        await sessionCRUD.DeleteSessionAsync(toDelete);

        SelectedSessionID = -1;
        EditModel = new();
        StateHasChanged();
        mode = MODE.None;
    }

    protected void SelectSession(SessionInfo session)
    {
        mode = MODE.EditDelete;
        SelectedSessionID = session.Id;
        EditModel.Name = session.Name;
        EditModel.Location = session.Location;
        EditModel.Date = session.Date;
        EditModel.Time = session.Time;
    }
}
