@page "/sessies"

@using Project_C.Data
@using Project_C.Models
@using Project_C.Services
@using System.ComponentModel.DataAnnotations; 

@inject SessionCRUD sessionCRUD
@inject NavigationManager uriHelper

<title>Sessies</title>
<AuthorizeView Roles="Organisator, Admin">
    <Authorized Context="Auth">
        @if (Sessions == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <button @onclick="@Add" id="Sessie Aanmaken" class="btn btn-success">Sessie aanmaken</button><br /><br />
            <table class='table table-hover'>
                <thead class="thead-dark">
                    <tr>
                        <th>Sessie naam</th>
                        <th>Sessie locatie</th>
                        <th>Datum</th>
                        <th>Tijdstip</th>
                        <th>Wijzig sessie</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Sessions)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Location</td>
                            <td>@item.Date.ToShortDateString()</td>
                            <td>@item.Time.TimeOfDay</td>
                            <td><button @onclick="@(() => SelectSession(item))" class="btn btn-primary">Wijzig</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        }


        @if (Sessions != null && mode == MODE.Add)
        {
            <EditForm Model="@EditModel" OnValidSubmit="@Submit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>
                    Sessie naam:
                    <InputText id="Name" @bind-Value="@EditModel.Name">Sessie naam:</InputText>

                </label>
                <br />
                <label>
                    Sessie Locatie:
                    <InputText id="Location" @bind-Value="@EditModel.Location">Sessie locatie:</InputText>
                </label>
                <br />
                <label>
                    Datum:
                    <InputDate id="Date" type="time" @bind-Value="@EditModel.Date" @bind-Value:format="dd/MM/yyyy">Datum:</InputDate>
                </label>
                <br />
                <label>
                    Tijdstip:
                    <input id="Time" type="time" @bind-value="@EditModel.Time" />
                </label>
                <br />
                <button type="submit" id="Verstuur" class="btn btn-success">Aanmaken</button>
            </EditForm>
        }

        @if (Sessions != null && mode == MODE.EditDelete)
        {
            <EditForm Model="@EditModel" OnValidSubmit="@Edit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>
                    Sessie naam:
                    <InputText id="Name" @bind-Value="@EditModel.Name">Sessie naam:</InputText>

                </label>
                <br />
                <label>
                    Sessie Locatie:
                    <InputText id="Location" @bind-Value="@EditModel.Location">Sessie locatie:</InputText>
                </label>
                <br />
                <label>
                    Datum:
                    <InputDate id="Date" type="time" @bind-Value="@EditModel.Date" @bind-Value:format="dd/MM/yyyy">Datum:</InputDate>
                </label>
                <br />
                <label>
                    Tijdstip:
                    <input id="Time" type="time" @bind-value="@EditModel.Time" />
                </label>
                <br />
                <button type="submit" class="btn btn-success">Wijzigen</button><br />
                <br />
            </EditForm>
        }

        @if (Sessions != null && mode == MODE.EditDelete)
        {
            <button @onclick="@Delete" class="btn btn-danger">Verwijderen</button>
        }
    </Authorized>
    <NotAuthorized>
        U bent niet geautoriseerd.
    </NotAuthorized>
</AuthorizeView>

@code {

    //A model so to manipulate these values in this file
    public class EditSessionModel
    {
        [Required(ErrorMessage = "Vul de sessie naam in"), StringLength(255, MinimumLength = 1)]
        public string Name { get; set; }

        [Required(ErrorMessage = "Vul de locatie naam in"), StringLength(255, MinimumLength = 1)]
        public string Location { get; set; }

        [Required(ErrorMessage = "Vul de datum in")]
        public DateTime Date { get; set; }

        [Required(ErrorMessage = "Vul het tijdstip in")]
        public DateTime Time { get; set; }

    }

    EditSessionModel EditModel { get; set; } = new();

    public System.Collections.Generic.IList<SessionInfo> Sessions { get; set; }

    private enum MODE { None, Add, EditDelete };

    public int SelectedSessionID = -1;

    MODE mode = MODE.None;


    //Edits the values of the form into these database fields
    public async void Edit()
    {
        var session = (from S in Sessions where S.Id == SelectedSessionID select S).FirstOrDefault() ?? new();
        session.Name = EditModel.Name;
        session.Location = EditModel.Location;
        session.Date = EditModel.Date;
        session.Time = EditModel.Time;
        await sessionCRUD.UpdateSessionAsync(session);
        if (!Sessions.Contains(session)) Sessions.Add(session);
        StateHasChanged();
    }

    //Inserts the values into the database
    public async void Submit()
    {
        var session = new SessionInfo();
        session.Name = EditModel.Name;
        session.Location = EditModel.Location;
        session.Date = EditModel.Date;
        session.Time = EditModel.Time;
        await sessionCRUD.UpdateSessionAsync(session);
        if (!Sessions.Contains(session)) Sessions.Add(session);
        StateHasChanged();
    }

    //Overrides the function when the page loads
    protected async override void OnInitialized()
    {
        Sessions = await sessionCRUD.GetSessionsAsync();
        StateHasChanged();
    }

    //Deletes the session
    protected async Task Delete()
    {
        var toDelete = (from S in Sessions where S.Id == SelectedSessionID select S).First();
        Sessions.Remove(toDelete);
        await sessionCRUD.DeleteSessionAsync(toDelete);

        SelectedSessionID = -1;
        EditModel = new();
        mode = MODE.None;
    }

    //Gets the info of the selected session so you can edit them
    protected void SelectSession(SessionInfo session)
    {
        mode = MODE.EditDelete;
        SelectedSessionID = session.Id;
        EditModel.Name = session.Name;
        EditModel.Location = session.Location;
        EditModel.Date = session.Date;
        EditModel.Time = session.Time;
    }

    //Clear the fields of the form
    protected void ClearFields()
    {
        EditModel.Name = string.Empty;
        EditModel.Location = string.Empty;
        EditModel.Date = new DateTime();
        EditModel.Time = new DateTime();
    }

    //Switches modes to add and clears fields
    public void Add()
    {
        ClearFields();

        mode = MODE.Add;
    }

}
