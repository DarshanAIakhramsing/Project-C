// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Project_C.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/_Imports.razor"
using Project_C;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/_Imports.razor"
using Project_C.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/Pages/SessionOverview.razor"
using Project_C.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/Pages/SessionOverview.razor"
using Project_C.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/Pages/SessionOverview.razor"
using Project_C.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/Pages/SessionOverview.razor"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/Pages/SessionOverview.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/Pages/SessionOverview.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/sessieoverzicht")]
    public partial class SessionOverview : OwningComponentBase<SessionService>
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 58 "/Users/ferdibilgic/Documents/GitHub/Project-C/Project_C/Pages/SessionOverview.razor"
       
    public System.Collections.Generic.IList<SessionInfo> sessies;
    public System.Collections.Generic.IList<UserMeeting> meetings;
    public List<(bool, SessionInfo)> AcceptedSessions = new List<(bool, SessionInfo)> { };

    UserMeeting CurrentMeeting { get; set; } = new();

    //Once the page starts this method will display all the sessions so it can be used in the foreach loop
    protected override void OnInitialized()
    {
        sessies = Service.DisplaySession();
    }

    //A tuple is being made with true and false values
    protected async override Task OnInitializedAsync()
    {
        foreach (var sessie in sessies)
        {
            AcceptedSessions.Add((await GetValidation(sessie.Id), sessie));
        }
    }

    //Executes the query to compare the user with the meeting ID given
    public async Task<bool> AcceptedValidation(int meetingID)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;
        var currentUser = await UserManager.GetUserAsync(user);

        return await database.UserMeetings.FirstOrDefaultAsync(x => x.User == currentUser && x.SessionInfo.Id == meetingID) != null;
    }

    //Returns a boolean to see if its true or false
    public async Task<bool> GetValidation(int MeetingID)
    {
        bool isValid = await AcceptedValidation(MeetingID);
        return isValid;
    }

    //Method for when a button is clicked on the session overview page, with an argument of the button that got clicked
    public async Task ClickHandler(int ButtonID)
    {
        //The bottom 3 lines gets the current user by authentication and then looks in the list which user fits the description
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authState.User;

        var currentUser = await UserManager.GetUserAsync(user);
        //Gets the first or default made session that has the session ID of the button that got pressed
        var currentSession = (from S in database.Session where S.Id == ButtonID select S).FirstOrDefault();

        //Combines the values of the user (ID) and the meeting (ID) and combines them into a new entry for the database to connect them
        UserMeeting meeting = new UserMeeting()
        {
            User = currentUser,
            SessionInfo = currentSession
        };

        await NotificationCreate.InsertMeetingAsync(meeting);

        //Each user who accepts an invite his participation counter goes up
        currentUser.accept_invitation++;
        //Updates the current user in the local database
        database.Update(currentUser);
        //Actually saves the changes of the user to the actual database
        await database.SaveChangesAsync();
        //Force refreshes the page
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager uriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NotificationCreate NotificationCreate { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<User> UserManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ApplicationDbContext database { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    }
}
#pragma warning restore 1591
